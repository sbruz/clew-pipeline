import os
from supabase import create_client, Client


def get_supabase_client() -> Client:
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY")
    if not SUPABASE_URL or not SUPABASE_KEY:
        raise ValueError("‚ùå SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    return create_client(SUPABASE_URL, SUPABASE_KEY)


def load_book_text(book_id: int) -> str:
    supabase = get_supabase_client()
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ original_text –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        "original_text").eq("id", book_id).single().execute()
    if response.data and response.data.get("original_text"):
        return response.data["original_text"]
    raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏.")


def save_formatted_text(book_id: int, formatted_text: str):
    supabase = get_supabase_client()
    print(f"üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º formated_text –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    supabase.table("books").update(
        {"formated_text": formatted_text}).eq("id", book_id).execute()
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


def check_supabase_connection():
    supabase = get_supabase_client()
    try:
        response = supabase.table("books").select("id").execute()
        if response.data:
            print(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ù–∞–π–¥–µ–Ω–æ {len(response.data)} –∑–∞–ø–∏—Å–µ–π.")
        else:
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Supabase:", e)
