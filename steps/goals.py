import os
import json
import time
import random
from openai import OpenAI
from schemas.chapter_goals import WordGroups
from utils.supabase_client import get_supabase_client


def generate_chapter_goals(book_id: int, source_field: str, result_field: str, target_lang: str):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {source_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        source_field).eq("id", book_id).single().execute()
    text_data = response.data.get(source_field)

    if not text_data:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    data = json.loads(text_data)
    chapters = data["chapters"]
    result = {"chapters": []}

    for chapter in chapters:
        print(f"\nüìò –ì–ª–∞–≤–∞ {chapter['chapter_number']}")
        word_list = []

        for paragraph in chapter["paragraphs"]:
            for sentence in paragraph["sentences"]:
                for word_idx, word in enumerate(sentence.get("words", [])):
                    word_id = f"{chapter['chapter_number']}_{paragraph['paragraph_number']}_{sentence['sentence_number']}_{word_idx + 1}"
                    word_list.append({
                        "id": word_id,
                        "original": word["o"],
                        "translation": word["o_t"]
                    })

        if len(word_list) < 5:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        word_lookup = {w["id"]: {"original": w["original"],
                                 "translation": w["translation"]} for w in word_list}

        # üîç –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 50 —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        # print("\nüß™ –¢–æ–ø 50 —Å–ª–æ–≤:")
        # for w in word_list[:50]:
        #     print(f"  {w['id']:10} | {w['original']:20} ‚Üí {w['translation']}")

        random.shuffle(word_list)
        input_json = json.dumps(word_list, ensure_ascii=False, indent=2)

        # --- –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø ---
        system_prompt_1 = (
            f"–¢—ã ‚Äî —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏. "
            f"–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ 5 —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö, –≥–ª–∞–≥–æ–ª–æ–≤, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–∞—Ä–µ—á–∏–π, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±—â–µ–π —Ç–µ–º–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–µ–∂–¥—ã, –≥–ª–∞–≥–æ–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, —ç–º–æ—Ü–∏–∏ –∏ —Ç.–¥.\n\n"
            f"–§–æ—Ä–º–∞—Ç:\n- label (–Ω–∞ —è–∑—ã–∫–µ {target_lang}): –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\n"
            f"- ids: —Å–ø–∏—Å–æ–∫ –∏–∑ 5 id —Å–ª–æ–≤, –∏–º–µ—é—â–∏—Ö —ç—Ç—É –æ–±—â—É—é —Ç–µ–º—É.\n\n"
            f"–í–∞–∂–Ω–æ:\n- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ id.\n"
            f"- –í –∫–∞–∂–¥–æ–π —Ç–µ–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 id.\n"
            f"- –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å id –Ω–µ–ª—å–∑—è.\n"
            f"- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ."
        )

        try:
            completion = client.beta.chat.completions.parse(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": system_prompt_1},
                    {"role": "user", "content": input_json[:3000]}
                ],
                response_format=WordGroups
            )
            groups_raw = completion.choices[0].message.parsed
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_raw.groups)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}")
            continue

        # --- –®–∞–≥ 2: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        try:
            system_prompt_2 = (
                "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ —Å–ª–æ–≤. –ö–∞–∂–¥–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç label –∏ 5 id —Å–ª–æ–≤.\n"
                "–í–æ—Ç —Å–ª–æ–≤–∞—Ä—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Å—Ç–æ—è—Ç –∑–∞ –∫–∞–∂–¥—ã–º id.\n\n"
                "–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –≥—Ä—É–ø–ø—ã –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–ù–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ ‚Äî —Ç–µ, –≥–¥–µ —Å–ª–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –æ–±—â–µ–π —Ç–µ–º–æ–π.\n"
                "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –¢–û–ü-3 –≥—Ä—É–ø–ø—ã —Å 5 —Å–ª–æ–≤–∞–º–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ."
            )

            completion = client.beta.chat.completions.parse(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": system_prompt_2},
                    {"role": "user", "content": "–°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤:\n" +
                        json.dumps(word_lookup, ensure_ascii=False, indent=2)[:2000]},
                    {"role": "user", "content": "–ì—Ä—É–ø–ø—ã:\n" +
                        groups_raw.model_dump_json(indent=2)[:2000]}
                ],
                response_format=WordGroups
            )

            top_groups = completion.choices[0].message.parsed
            print(f"üèÖ –¢–æ–ø-–≥—Ä—É–ø–ø: {len(top_groups.groups)}")

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ id
            word_lookup = {w["id"]: w for w in word_list}

            # –í—ã–≤–æ–¥–∏–º —Å–ª–æ–≤–∞ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for group in top_groups.groups:
                print(f"\nüìö –ì—Ä—É–ø–ø–∞: {group.label}")
                for wid in group.ids:
                    word = word_lookup.get(wid)
                    if word:
                        print(
                            f"{wid:10} | {word['original']:20} ‚Üí {word['translation']}")
                    else:
                        print(f"{wid:10} | ‚ö†Ô∏è ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ")

            result["chapters"].append({
                "chapter_number": chapter["chapter_number"],
                "goals": [g.model_dump() for g in top_groups.groups]
            })

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            continue

        time.sleep(1)

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    supabase.table("books").update(
        {result_field: json.dumps(result, ensure_ascii=False, indent=2)}
    ).eq("id", book_id).execute()

    print("‚úÖ –¶–µ–ª–∏ –ø–æ –≥–ª–∞–≤–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
