from schemas.paragraph_translate import HowToTranslateTask
import os
import json
import time
import random
from openai import OpenAI
from utils.supabase_client import get_supabase_client
from schemas.paragraph_tf import ParagraphTFItem, ParagraphTFQuestionOnly
from schemas.paragraph_translate import HowToTranslateTask
from schemas.paragraph_two_words import TwoWordsTask


def generate_paragraph_tasks(book_id: int, source_field: str, result_field: str, target_lang: str):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {source_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        source_field).eq("id", book_id).single().execute()
    text_data = response.data.get(source_field)

    if not text_data:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    data = json.loads(text_data)
    chapters = data["chapters"]
    result = {"chapters": []}

    for chapter in chapters:
        print(f"\nüìò –ì–ª–∞–≤–∞ {chapter['chapter_number']}")
        chapter_output = {
            "chapter_number": chapter["chapter_number"], "paragraphs": []}

        for paragraph in chapter["paragraphs"]:
            paragraph_text = " ".join(
                sentence["sentence_original"] for sentence in paragraph["sentences"]
            ).strip()

            if not paragraph_text:
                continue

            print(f"  ‚úÇÔ∏è –ê–±–∑–∞—Ü {paragraph['paragraph_number']}")

            # üé≤ –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            expected_answer = "true" if random.random() < 0.6 else "false"

            # ‚úçÔ∏è –ü—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if expected_answer == "true":
                system_prompt = (
                    f"–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —á—Ç–µ–Ω–∏—é –∫–Ω–∏–≥. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∞–±–∑–∞—Ü–∞.\n\n"
                    f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n"
                    f"- –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ {target_lang};\n"
                    f"- –æ—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ;\n"
                    f"- –±—ã—Ç—å –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é;\n"
                    f"- –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–µ–≤–∏–¥–Ω—ã–º –¥–ª—è –≤–¥—É–º—á–∏–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è;\n"
                    f"- –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, –¥–æ 7 —Å–ª–æ–≤;\n"
                    f"- –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–µ–π.\n\n"
                    f"–í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ: {{ question: '...' }}"
                )
            else:
                system_prompt = (
                    f"–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —á—Ç–µ–Ω–∏—é –∫–Ω–∏–≥. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–≤–µ–¥–æ–º–æ –ª–æ–∂–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∞–±–∑–∞—Ü–∞.\n\n"
                    f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ:\n"
                    f"- –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ {target_lang};\n"
                    f"- –æ—Ç—Ä–∞–∂–∞—Ç—å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ;\n"
                    f"- –±—ã—Ç—å –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é;\n"
                    f"- –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–µ–≤–∏–¥–Ω—ã–º –¥–ª—è –≤–¥—É–º—á–∏–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è;\n"
                    f"- –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, –¥–æ 7 —Å–ª–æ–≤;\n"
                    f"- –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–µ–π.\n\n"
                    f"–í–µ—Ä–Ω–∏ –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ: {{ question: '...' }}"
                )

            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": paragraph_text[:2000]}
                    ],
                    response_format=ParagraphTFQuestionOnly
                )
                q_obj = completion.choices[0].message.parsed

                # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ –≤–æ–ø—Ä–æ—Å–∞
                cleaned_question = q_obj.question.strip()
                if cleaned_question.endswith("."):
                    cleaned_question = cleaned_question[:-1]

                print(f"    üèÖ –í–æ–ø—Ä–æ—Å: {cleaned_question} [{expected_answer}]")

                paragraph_output = {
                    "paragraph_number": paragraph["paragraph_number"],
                    "true_or_false": ParagraphTFItem(
                        question=cleaned_question,
                        answer=expected_answer
                    ).model_dump()
                }

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞: {e}")
                paragraph_output = {
                    "paragraph_number": paragraph["paragraph_number"],
                    "true_or_false": None
                }

            chapter_output["paragraphs"].append(paragraph_output)
            time.sleep(1)

        result["chapters"].append(chapter_output)

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    supabase.table("books").update({
        result_field: json.dumps(result, ensure_ascii=False, indent=2)
    }).eq("id", book_id).execute()
    print("‚úÖ –í–æ–ø—Ä–æ—Å—ã –ø–æ –∞–±–∑–∞—Ü–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def add_how_to_translate_tasks(book_id: int, words_field: str, base_task_field: str, result_field: str, target_lang: str, source_lang: str):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(
        f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {words_field} –∏ {base_task_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    words_response = supabase.table("books").select(
        words_field).eq("id", book_id).single().execute()
    tasks_response = supabase.table("books").select(
        base_task_field).eq("id", book_id).single().execute()

    words_data = json.loads(words_response.data.get(words_field))
    tasks_data = json.loads(tasks_response.data.get(base_task_field))

    result = {"chapters": []}

    for ch_words, ch_tasks in zip(words_data["chapters"], tasks_data["chapters"]):
        print(f"\nüìò –ì–ª–∞–≤–∞ {ch_words['chapter_number']}")
        updated_paragraphs = []

        for par_words, par_tasks in zip(ch_words["paragraphs"], ch_tasks["paragraphs"]):
            paragraph_number = par_words["paragraph_number"]
            print(f"  ‚úÇÔ∏è –ê–±–∑–∞—Ü {paragraph_number}")

            word_objects = []
            word_lookup = {}

            for sentence in par_words["sentences"]:
                sid = sentence["sentence_number"]
                for wid, word in enumerate(sentence.get("words", [])):
                    word_id = f"{ch_words['chapter_number']}_{par_words['paragraph_number']}_{sid}_{wid + 1}"

                    o = word["o"].strip()
                    o_t = word["o_t"].strip()

                    # ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                    if len(o) > 22 or len(o_t) > 22:
                        continue

                    word_obj = {
                        "id": word_id,
                        "o": word["o"],
                        "o_t": word["o_t"]
                    }
                    word_objects.append(word_obj)
                    word_lookup[word_id] = word_obj

            if len(word_objects) < 3:
                print("    ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤")
                par_tasks["how_to_translate"] = None
                updated_paragraphs.append(par_tasks)
                continue

            input_json = json.dumps(word_objects, ensure_ascii=False, indent=2)

            system_prompt = (
                "–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
                "–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –ø–æ–ª—è–º–∏:\n"
                "- id ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞\n"
                "- o ‚Äî —Å–ª–æ–≤–æ –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ\n"
                "- o_t ‚Äî –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫ —É—á–µ–Ω–∏–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –º–µ–Ω–µ–µ —á–∞—Å—Ç–æ—Ç–Ω–æ–µ, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –¥–ª—è –∞–±–∑–∞—Ü–∞ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞."
                "–í–µ—Ä–Ω–∏:\n"
                "- correct_id ‚Äî id —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞\n"
                "- incorrect1_id –∏ incorrect2_id ‚Äî id –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞, —Å—Ö–æ–∂–∏—Ö –ø–æ —Ç–∏–ø—É, –Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é\n\n"
                "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –ø–æ —Å—Ö–µ–º–µ"
            )

            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": input_json[:3000]}
                    ],
                    response_format=HowToTranslateTask
                )
                result_obj = completion.choices[0].message.parsed

                try:
                    correct_word = word_lookup[result_obj.correct_id]
                    incorrect1 = word_lookup[result_obj.incorrect1_id]
                    incorrect2 = word_lookup[result_obj.incorrect2_id]
                except KeyError as e:
                    print(
                        f"    ‚ö†Ô∏è –û–¥–∏–Ω –∏–∑ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–±–∑–∞—Ü.")
                    par_tasks["how_to_translate"] = None
                    updated_paragraphs.append(par_tasks)
                    continue

                question_text = correct_word.get("o_t", "<?>")

                par_tasks["how_to_translate"] = {
                    "question": f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{question_text}'?",
                    "correct": correct_word.get("o", "‚Äî"),
                    "incorrect1": incorrect1.get("o", "‚Äî"),
                    "incorrect2": incorrect2.get("o", "‚Äî"),
                    "c": result_obj.correct_id,
                    "i1": result_obj.incorrect1_id,
                    "i2": result_obj.incorrect2_id
                }

                print(f"    ‚úÖ –í–æ–ø—Ä–æ—Å: {par_tasks['how_to_translate']['question']} ‚Üí "
                      f"{par_tasks['how_to_translate']['correct']} | "
                      f"{par_tasks['how_to_translate']['incorrect1']} | "
                      f"{par_tasks['how_to_translate']['incorrect2']}")

            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
                par_tasks["how_to_translate"] = None

            updated_paragraphs.append(par_tasks)
            time.sleep(1)

        result["chapters"].append({
            "chapter_number": ch_tasks["chapter_number"],
            "paragraphs": updated_paragraphs
        })

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    supabase.table("books").update({
        result_field: json.dumps(result, ensure_ascii=False, indent=2)
    }).eq("id", book_id).execute()
    print("‚úÖ –í–æ–ø—Ä–æ—Å—ã 'how to translate' —Å ID –∏ —Ç–µ–∫—Å—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def add_two_words_tasks(book_id: int, words_field: str, base_task_field: str, result_field: str, target_lang: str):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(
        f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {words_field} –∏ {base_task_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    words_response = supabase.table("books").select(
        words_field).eq("id", book_id).single().execute()
    tasks_response = supabase.table("books").select(
        base_task_field).eq("id", book_id).single().execute()

    words_data = json.loads(words_response.data.get(words_field))
    tasks_data = json.loads(tasks_response.data.get(base_task_field))

    result = {"chapters": []}

    for ch_words, ch_tasks in zip(words_data["chapters"], tasks_data["chapters"]):
        print(f"\nüìò –ì–ª–∞–≤–∞ {ch_words['chapter_number']}")
        updated_paragraphs = []

        for par_words, par_tasks in zip(ch_words["paragraphs"], ch_tasks["paragraphs"]):
            paragraph_number = par_words["paragraph_number"]
            print(f"  ‚úÇÔ∏è –ê–±–∑–∞—Ü {paragraph_number}")

            candidates = []
            word_lookup = {}

            for sentence in par_words["sentences"]:
                sid = sentence["sentence_number"]
                for wid, word in enumerate(sentence.get("words", [])):
                    word_id = f"{ch_words['chapter_number']}_{paragraph_number}_{sid}_{wid + 1}"
                    o_t = word.get("o_t", "").strip()
                    if len(o_t.split()) <= 2:
                        candidates.append({"id": word_id, "o_t": o_t})
                        word_lookup[word_id] = o_t

            if len(candidates) < 2:
                print("    ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ª–æ–≤")
                par_tasks["two_words"] = None
                updated_paragraphs.append(par_tasks)
                continue

            input_json = json.dumps(candidates, ensure_ascii=False, indent=2)

            system_prompt = (
                f"–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ {target_lang}.\n"
                f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
                f"1. –ù–∞–π–¥–∏ –¥–≤–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –ø–æ —Ç–∏–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–∞ ‚Äî –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã), –Ω–æ —Ä–∞–∑–Ω—ã–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.\n"
                f"2. –í–µ—Ä–Ω–∏ –∏—Ö id –∫–∞–∫ id1 –∏ id2.\n"
                f"3. –ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–µ—Ç—å–µ —Å–ª–æ–≤–æ –Ω–∞ {target_lang}, –ø–æ—Ö–æ–∂–µ–µ –ø–æ —Ç–∏–ø—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º–µ —Ç–µ–∫—Å—Ç–∞.\n\n"
                f"–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON: {{ id1, id2, invented }}"
            )

            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": input_json[:3000]}
                    ],
                    response_format=TwoWordsTask
                )
                task = completion.choices[0].message.parsed

                if task.id1 not in word_lookup or task.id2 not in word_lookup:
                    print(
                        f"    ‚ùå –û—à–∏–±–∫–∞: ID {task.id1} –∏–ª–∏ {task.id2} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–±–∑–∞—Ü.")
                    par_tasks["two_words"] = None
                    updated_paragraphs.append(par_tasks)
                    continue

                o1 = word_lookup[task.id1]
                o2 = word_lookup[task.id2]

                print(
                    f"    ‚úÖ {task.id1}: {o1} | {task.id2}: {o2} ‚Üí {task.invented}")

                par_tasks["two_words"] = {
                    "id1": task.id1,
                    "id2": task.id2,
                    "w1": o1,
                    "w2": o2,
                    "invented": task.invented
                }

            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
                par_tasks["two_words"] = None

            updated_paragraphs.append(par_tasks)
            time.sleep(1)

        result["chapters"].append({
            "chapter_number": ch_tasks["chapter_number"],
            "paragraphs": updated_paragraphs
        })

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    supabase.table("books").update({
        result_field: json.dumps(result, ensure_ascii=False, indent=2)
    }).eq("id", book_id).execute()
    print("‚úÖ –í–æ–ø—Ä–æ—Å—ã 'two words + invented' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
