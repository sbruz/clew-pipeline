import os
import json
import time
import glob
import base64
import google.generativeai as genai
from openai import OpenAI
from utils.supabase_client import get_supabase_client
from PIL import Image
from PIL import ImageEnhance
from io import BytesIO

ICON_STYLE_PAOLINI = "Cheerful, storybook illustration style with playful ink lines and bright, soft watercolors; friendly, round-faced characters in simple, expressive poses; light, sunny palette with creamy whites, warm yellows, and cheerful greens; scenes filled with animals, flowers, and handcrafted details; evokes joy, innocence, and a gentle sense of adventure ‚Äî perfect for light-hearted fantasy or cozy rural tales."
ICON_STYLE = "Bold, optimized for high visual clarity at small sizes illustration; characters shown in close-up or bust format with simplified, expressive forms and thick, readable silhouettes; flat or slightly gradient shading with minimal texture for sharp edge definition; strong contrast between character and background ‚Äî clean color blocking and focused rim lighting for instant legibility; color palette tuned for recognizability: vibrant key tones (warm reds, cool cyans, bright yellows) over muted or monochrome backdrops; minimalistic composition with centered framing and balanced negative space; no visual noise or fine details that blur when downscaled; illustration rendered on a solid, non-transparent background for consistent appearance across all platforms; evokes personality and clarity in a format designed for avatars, buttons, app icons, and UI thumbnails."
ICON_STYLE_ICON = "Bold, icon-optimized stylized illustration with high visual clarity at small sizes; characters shown in close-up or bust format with simplified, expressive forms and thick, readable silhouettes; flat or slightly gradient shading with minimal texture for sharp edge definition; strong contrast between character and background ‚Äî clean color blocking and focused rim lighting for instant legibility; color palette tuned for recognizability: vibrant key tones (warm reds, cool cyans, bright yellows) over muted or monochrome backdrops; minimalistic composition with centered framing and balanced negative space; no visual noise or fine details that blur when downscaled; illustration rendered on a solid, non-transparent background for consistent appearance across all platforms; evokes personality and clarity in a format designed for avatars, buttons, app icons, and UI thumbnails."
ICON_STYLE_GOOD_LIGHTER = "Bold illustration with high visual clarity at small sizes; characters shown in close-up or bust format with simplified, expressive forms and thick, readable silhouettes; flat or slightly gradient shading with minimal texture for sharp edge definition; strong contrast between character and background ‚Äî clean color blocking and focused rim lighting for instant legibility; color palette tuned for recognizability: vibrant key tones over muted or monochrome backdrops; minimalistic composition with centered framing and balanced negative space; no visual noise or fine details that blur when downscaled; icon rendered on a solid, non-transparent background for consistent appearance across all platforms; evokes personality and clarity in a format designed for avatars, buttons, app icons, and UI thumbnails. Use a slightly brighter palette, preserving contrast but shifting away from overly dark or muted tones."
ICON_STYLE_LIGHT_DISNEY = "Stylized digital illustration with a clean, high-clarity look optimized for modern UI thumbnails and avatars. Characters appear in close-up or bust format with bold, simplified forms and smooth, readable contours. Shading is flat or uses subtle soft gradients with no heavy textures, giving a polished, digital-native feel. Strong silhouette design and rim lighting enhance edge separation. Color palette emphasizes slightly brighter, saturated key tones layered over soft desaturated backgrounds for visual pop ‚Äî avoiding muddy or overly dark tones. Composition is tightly framed, centered, with minimal internal padding and no visual clutter. No transparency; background is solid and consistent. Designed to retain character and emotion even at small scales ‚Äî with a contemporary gloss, UI friendliness, and cross-platform adaptability."
ICON_STYLE_BRIGHT = "Bold, icon-optimized stylized illustration with high visual clarity at small sizes; characters shown in close-up or bust format with simplified, expressive forms and thick, readable silhouettes; flat or slightly gradient shading with minimal texture for sharp edge definition; strong contrast between character and background ‚Äî clean color blocking and focused rim lighting for instant legibility; color palette tuned for recognizability: vibrant key tones (warm reds, cool cyans, bright yellows) over softened, gently tinted backdrops instead of dark or muted tones; overall brightness slightly elevated to avoid murky or overly shadowed areas, ensuring a light, approachable feel; minimalistic composition with centered framing and balanced negative space; no visual noise or fine details that blur when downscaled; illustration rendered on a solid, non-transparent background for consistent appearance across all platforms; evokes personality and clarity in a format designed for avatars, buttons, app icons, and UI thumbnails."

LANG_NAME_RU_CASE = {
    "ru": "—Ä—É—Å—Å–∫–∏–π",
    "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π",
    "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
    "ja": "—è–ø–æ–Ω—Å–∫–∏–π",
    "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
    "tr": "—Ç—É—Ä–µ—Ü–∫–∏–π",
    "de": "–Ω–µ–º–µ—Ü–∫–∏–π",
}


def generate_titles(book_id: int, book_title: str, book_author: str):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(f"CHAP[{book_id}] üì• –ó–∞–≥—Ä—É–∂–∞–µ–º text_by_chapters...")
    response = supabase.table("books").select(
        "text_by_chapters"
    ).eq("id", book_id).single().execute()
    text_data = response.data.get("text_by_chapters")

    if not text_data:
        print(f"CHAP[{book_id}] ‚ùå –ù–µ—Ç text_by_chapters –¥–ª—è –∫–Ω–∏–≥–∏.")
        return

    data = json.loads(text_data)
    chapters = data["chapters"]
    result = {"chapters": []}

    prev_summaries = []
    # –®–∞–≥ 1: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã (—Å retry)
    for chapter in chapters:
        chapter_number = chapter.get("chapter_number")
        print(
            f"\nCHAP[{book_id}] üìò –ì–ª–∞–≤–∞ {chapter_number}: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...")

        # –°–∫–ª–µ–∏–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        full_text = "\n".join(
            p["paragraph_content"] for p in chapter.get("paragraphs", [])
        )

        context = ""
        if prev_summaries:
            context = "–í–æ—Ç —á—Ç–æ –±—ã–ª–æ –¥–æ —ç—Ç–æ–π –≥–ª–∞–≤—ã:\n" + \
                "\n".join(prev_summaries) + "\n\n"

        system_prompt = (
            f"–¢—ã –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –∏–∑ –∫–Ω–∏–≥–∏ '{book_title}' –∞–≤—Ç–æ—Ä–∞ {book_author}. "
            f"–°–¥–µ–ª–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –±–µ–∑ –≤–æ–¥—ã.\n"
            f"{'–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤. ' + context if context else ''}"
            f"\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (summary), –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."
        )
        user_prompt = f"{context}–¢–µ–∫—Å—Ç –≥–ª–∞–≤—ã:\n{full_text}"

        summary = None
        for attempt in range(2):
            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ]
                )
                summary = completion.choices[0].message.content.strip()
                print(f"CHAP[{book_id}] ‚úÖ Summary –ø–æ–ª—É—á–µ–Ω.")
                break
            except Exception as e:
                print(
                    f"CHAP[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(1)
        if summary is None:
            print(
                f"CHAP[{book_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å summary –¥–ª—è –≥–ª–∞–≤—ã {chapter_number} –∑–∞ 2 –ø–æ–ø—ã—Ç–∫–∏. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        prev_summaries.append(summary)
        chapter["summary"] = summary

    # –®–∞–≥ 2: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å retry)
    prev_summaries = []
    for chapter in chapters:
        chapter_number = chapter.get("chapter_number")
        summary = chapter["summary"]

        context = ""
        if prev_summaries:
            context = "–í–æ—Ç —á—Ç–æ –±—ã–ª–æ –¥–æ —ç—Ç–æ–π –≥–ª–∞–≤—ã:\n" + \
                "\n".join(prev_summaries) + "\n\n"

        print(
            f"CHAP[{book_id}] üè∑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}...")

        system_prompt = (
            f"–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–∏–¥—É–º–∞–π –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–∫–±–µ–π—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ 8 —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–ª–∞–≤—ã –∏–∑ –∫–Ω–∏–≥–∏ '{book_title}' –∞–≤—Ç–æ—Ä–∞ {book_author}, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –µ—ë –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.\n"
            f"–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º –ª—é–¥—è–º: —Å–ª–æ–∂–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ª—é–¥–µ–π, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ, —Å–æ–º–Ω–µ–Ω–∏—è, –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ–±–µ–¥—ã, –≤—Å–µ —á—Ç–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤ —Ç–µ–ª–µ—à–æ—É –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö....\n"
            f"–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
            f"–ò–∑–±–µ–≥–∞–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π.\n"
            f"{'–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤. ' + context if context else ''}"
            f"\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        )
        user_prompt = f"{context}–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥–ª–∞–≤—ã:\n{summary}"

        title = None
        for attempt in range(2):
            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ]
                )
                title = completion.choices[0].message.content.strip()
                print(f"CHAP[{book_id}] ‚úÖ Title –ø–æ–ª—É—á–µ–Ω: {title}")
                break
            except Exception as e:
                print(
                    f"CHAP[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ title (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(1)
        if title is None:
            print(
                f"CHAP[{book_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å title –¥–ª—è –≥–ª–∞–≤—ã {chapter_number} –∑–∞ 2 –ø–æ–ø—ã—Ç–∫–∏. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        chapter["title"] = title
        prev_summaries.append(summary)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π JSON (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞, title, summary)
    result["chapters"] = [
        {
            "chapter_number": chapter.get("chapter_number"),
            "title": chapter.get("title"),
            "summary": chapter.get("summary")
        }
        for chapter in chapters
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"CHAP[{book_id}] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º chapters_titles...")
    supabase.table("books").update(
        {"chapters_titles": json.dumps(result, ensure_ascii=False, indent=2)}
    ).eq("id", book_id).execute()
    print(f"CHAP[{book_id}] ‚úÖ chapters_titles —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def generate_image_icon(user_ref, title, author, content, style, model="gpt-image-1", size="1024x1024"):
    prompt = (
        f"–ù–∞—Ä–∏—Å—É–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏ '{title}' –∞–≤—Ç–æ—Ä–∞ {author} –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å—Ü–µ–Ω—ã '{content}'.\n"
        f"–ù–µ –≤—ã–≤–æ–¥–∏ –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–¥–ø–∏—Å–µ–π –Ω–∞ –∏–∫–æ–Ω–∫–µ. –ò –Ω–µ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞.\n"
        f"–°—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º: {style}. –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∫–Ω–∏–≥–∏ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –≥–ª–∞–≤—ã."
    )
    print("   üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI:")
    print(f"      üìù –ü—Ä–æ–º–ø—Ç: {prompt}")

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    response = client.images.generate(
        model=model,
        prompt=prompt,
        n=1,
        size=size,
        user=user_ref
    )

    image_base64 = response.data[0].b64_json
    if not image_base64:
        raise ValueError("‚ùå OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    image_bytes = base64.b64decode(image_base64)
    return image_bytes


def generate_scene_description(summary, chapter_number, title, author, prev_scene=None):
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    context = ""
    if prev_scene:
        context = (
            "–ï—Å–ª–∏ –≤ –∫–∞–¥—Ä–µ –µ—Å—Ç—å —Ç–µ –∂–µ –≥–µ—Ä–æ–∏, —á—Ç–æ –∏ –≤ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è—Ö –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≥–ª–∞–≤–∞–º, —Ç–æ –∏—Ö –æ–¥–µ–∂–¥–∞ –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–∂–∞–π –≤ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π –≥–ª–∞–≤–µ.\n"
            f"–í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø—Ä—ã–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤—ã: {prev_scene}\n\n"

        )

    system_prompt = (
        "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. "
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≥–ª–∞–≤—ã –∏ —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —á–µ–º –∫–Ω–∏–≥–∞, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –¥–ª—è –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏. "
        "–í—ã–±–∏—Ä–∞–π –º–æ–º–µ–Ω—Ç, –æ—Å—Ç–∞–≤–ª—è—é—â—É—é –∏–Ω—Ç—Ä–∏–≥—É, –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–û–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∑—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ü–µ–Ω—É, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω, –∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω.\n"
        "–ù–∞–∑–æ–≤–∏ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ü–µ–Ω–µ, —É–∫–∞–∂–∏ –µ–≥–æ —Ä–æ–ª—å –≤ –∫–Ω–∏–≥–µ –∏ –ø–æ–¥–±—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏:\n"
        "‚Äì¬†–í–Ω–µ—à–Ω–æ—Å—Ç—å: –ª–∏—Ü–æ, –≤–æ–ª–æ—Å—ã, –±–æ—Ä–æ–¥–∞, —É—Å—ã, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, —Ä—É–∫–∏, –Ω–æ–≥–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ (—Ñ–æ—Ä–º–∞, —Ü–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏).\n"
        "‚Äì¬†–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å: –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä, —á—Ç–æ –æ–¥–µ—Ç–æ, —á—Ç–æ –Ω–∞ –Ω–æ–≥–∞—Ö (—Ñ–∞—Å–æ–Ω, —Ü–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏).\n"
        "‚Äì¬†–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞ –æ–¥–µ–∂–¥–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤ —Ä—É–∫–∞—Ö (—Ñ–æ—Ä–º–∞, —Ü–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏).\n\n"
        "–£—á—Ç–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏, —á—Ç–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ, –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–µ–ª–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫—Ä—É–ø–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç.\n"
        f"{context}\n"
        "–ò–∑–±–µ–≥–∞–π –∏–∑–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–µ—Ä–∫–∞–ª–µ.\n"
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
    )
    user_prompt = (
        f"–ì–ª–∞–≤–∞ {chapter_number} –∏–∑ –∫–Ω–∏–≥–∏ '{title}' –∞–≤—Ç–æ—Ä–∞ {author}:\n"
        f"{summary}"
    )

    for attempt in range(2):
        try:
            completion = client.beta.chat.completions.parse(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ]
            )
            scene = completion.choices[0].message.content.strip()
            print(f"      ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω–æ.")
            return scene
        except Exception as e:
            print(
                f"      ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            time.sleep(1)
    return None


def check_icons_style_similarity(prev_image: Image.Image, curr_image: Image.Image) -> bool:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–≤—É—Ö –∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ OpenAI.
    prev_image ‚Äî PIL.Image.Image –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤—ã (—É–∂–µ 256x256 –∏–ª–∏ 512x512)
    curr_image ‚Äî PIL.Image.Image —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ã (—É–∂–µ 256x256 –∏–ª–∏ 512x512)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –∏–Ω–∞—á–µ False.
    """
    import base64
    import io
    from openai import OpenAI
    import os

    def image_to_base64(img):
        with io.BytesIO() as output:
            img.save(output, format="WEBP")
            return base64.b64encode(output.getvalue()).decode("utf-8")

    prev_b64 = image_to_base64(prev_image)
    curr_b64 = image_to_base64(curr_image)

    compare_prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Å—Ç–∏–ª—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π. "
        "–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –¥–≤–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≥–ª–∞–≤ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏. "
        "–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª—å –æ–±–µ–∏—Ö –∏–∫–æ–Ω–æ–∫. "
        "–ï—Å–ª–∏ —Å—Ç–∏–ª—å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–ª–µ–µ –º–µ–Ω–µ–µ –ø–æ—Ö–æ–∂–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Ä—è–¥–æ–º –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –æ—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: TRUE. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ, —á—Ç–æ —Å–∏–ª—å–Ω–æ –≤—ã–±–∏–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—â–µ–≥–æ —Å—Ç–∏–ª—è ‚Äî –æ—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: FALSE."
    )
    try:
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        completion = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": compare_prompt},
                {"role": "user",
                    "content": "–ü–µ—Ä–≤–∞—è –∏–∫–æ–Ω–∫–∞ (base64): " + prev_b64},
                {"role": "user",
                    "content": "–í—Ç–æ—Ä–∞—è –∏–∫–æ–Ω–∫–∞ (base64): " + curr_b64},
            ]
        )
        result = completion.choices[0].message.content.strip().upper()
        print(f"üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫: {result}")
        return result == "TRUE"
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")
        return True  # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å


def generate_icons(book_id: int, title: str, author: str):

    user_ref = f"book-{book_id}-chapter-icon-generator:{int(time.time())}"

    supabase = get_supabase_client()
    print(f"ICONS[{book_id}] üì• –ó–∞–≥—Ä—É–∂–∞–µ–º chapters_titles...")
    response = supabase.table("books").select(
        "chapters_titles"
    ).eq("id", book_id).single().execute()
    chapters_titles = response.data.get("chapters_titles")

    if not chapters_titles:
        print(f"ICONS[{book_id}] ‚ùå –ù–µ—Ç chapters_titles –¥–ª—è –∫–Ω–∏–≥–∏.")
        return

    data = json.loads(chapters_titles)
    chapters = data.get("chapters", [])
    errors = []

    outdir = f"./export/chapters"
    os.makedirs(outdir, exist_ok=True)

    n_chapters = len(chapters)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –µ—Å—Ç—å –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
    pattern_small = os.path.join(outdir, f"book_{book_id}_*.webp")
    existing_small = sorted(glob.glob(pattern_small))
    existing_small = [f for f in existing_small if not f.endswith('_big.webp')]

    if len(existing_small) == n_chapters:
        print(
            f"ICONS[{book_id}] ‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —É–∂–µ –µ—Å—Ç—å ({n_chapters} —à—Ç). –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    elif len(existing_small) > 0:
        print(f"ICONS[{book_id}] ‚ö†Ô∏è –ï—Å—Ç—å {len(existing_small)} –∏–∫–æ–Ω–æ–∫ –∏–∑ {n_chapters}. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
        # –£–¥–∞–ª—è–µ–º –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ, –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        pattern_all = os.path.join(outdir, f"book_{book_id}_*.webp")
        for f in glob.glob(pattern_all):
            os.remove(f)

    prev_scenes = []  # –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ü–µ–Ω
    prev_image_small = None  # –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤—ã (PIL.Image)

    for chapter in chapters:
        chapter_number = chapter.get("chapter_number")
        summary = chapter.get("summary", "").strip()
        if not summary:
            print(
                f"ICONS[{book_id}] ‚ö†Ô∏è –ù–µ—Ç summary –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            errors.append(f"–ì–ª–∞–≤–∞ {chapter_number}")
            continue

        # --- –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ü–µ–Ω
        if prev_scenes:
            prev_scene_text = "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤:\n" + \
                "\n".join(
                    [f"–°—Ü–µ–Ω–∞ {i+1}: {s}" for i, s in enumerate(prev_scenes)]
                ) + "\n\n"
        else:
            prev_scene_text = ""

        file_big = os.path.join(
            outdir, f"book_{book_id}_{chapter_number}_big.webp")
        file_small = os.path.join(
            outdir, f"book_{book_id}_{chapter_number}.webp")

        success = False
        for attempt in range(5):
            print(
                f"\nICONS[{book_id}] üìù –ì–ª–∞–≤–∞ {chapter_number}: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
            scene_description = generate_scene_description(
                summary, chapter_number, title, author, prev_scene_text
            )
            if not scene_description:
                print(
                    f"ICONS[{book_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}.")
                continue

            print(
                f"ICONS[{book_id}] üé® –ì–ª–∞–≤–∞ {chapter_number}: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É...")
            try:
                icon_bytes = generate_image_icon(
                    user_ref=user_ref,
                    title=title,
                    author=author,
                    content=scene_description,
                    style=ICON_STYLE
                )
                print(f"ICONS[{book_id}] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
            except Exception as e:
                print(
                    f"ICONS[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(1)
                continue

            # --- –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è, —Å–∂–∞—Ç–∏–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è ---
            try:
                image = Image.open(BytesIO(icon_bytes)).convert("RGBA")
                enhancer = ImageEnhance.Brightness(image)
                image_exposed = enhancer.enhance(1.10)
                image_small = image_exposed.resize((512, 512), Image.LANCZOS)

                need_regenerate = False
                if prev_image_small is not None:
                    print(
                        f"ICONS[{book_id}] üßê –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∏–ª—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤–æ–π...")
                    is_similar = check_icons_style_similarity(
                        prev_image_small, image_small)
                    if not is_similar:
                        print(
                            f"ICONS[{book_id}] ‚ùå –°—Ç–∏–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}...")
                        need_regenerate = True

                if need_regenerate:
                    time.sleep(1)
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ
                    image_small.save(file_small, "WEBP")
                    print(f"ICONS[{book_id}] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_small}")
                    prev_image_small = image_small
                    prev_scenes.append(scene_description)
                    success = True
                    break
            except Exception as e:
                print(f"ICONS[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                time.sleep(1)

        if not success:
            print(
                f"ICONS[{book_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –≥–ª–∞–≤—ã {chapter_number} –∑–∞ 2 –ø–æ–ø—ã—Ç–∫–∏.")
            errors.append(f"–ì–ª–∞–≤–∞ {chapter_number}")

    # –ò—Ç–æ–≥: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    if errors:
        print("\n\n***** –ù–ï –£–î–ê–õ–û–°–¨ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –ò–ö–û–ù–ö–£ –î–õ–Ø –°–õ–ï–î–£–Æ–©–ò–• –ì–õ–ê–í *****")
        for err in errors:
            print(f"   {err}")
        print("***************************************************************")
    else:
        print("\n–í–°–ï –ò–ö–û–ù–ö–ò –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´!")


def refine_title_with_gemini_sdk(book_title, book_author, orig_title, title, target_lang):
    try:
        lang_names = {
            "ru": "—Ä—É—Å—Å–∫–∏–π",
            "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π",
            "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
            "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
            "ja": "—è–ø–æ–Ω—Å–∫–∏–π",
            "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
            "tr": "—Ç—É—Ä–µ—Ü–∫–∏–π",
            "de": "–Ω–µ–º–µ—Ü–∫–∏–π",
        }
        lang_name = lang_names.get(target_lang, target_lang)

        prompt = (
            f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ '{orig_title}' –≥–ª–∞–≤—ã –∏–∑ –∫–Ω–∏–≥–∏ {book_title} –∞–≤—Ç–æ—Ä–∞ {book_author} –Ω–∞ {lang_name} —è–∑—ã–∫:\n"
            f"'{title}'\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∑–≤—É—á–∏—Ç –µ—Å—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ –∏—Å–∫–∞–∂–∞–µ—Ç —Å–º—ã—Å–ª –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, —Ç–æ –≤–µ—Ä–Ω–∏ –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
            "–ï—Å–ª–∏ –∂–µ –µ—Å—Ç—å –æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø—Ä–∞–≤—å.\n"
            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
        )
        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
        model = genai.GenerativeModel('gemini-2.5-flash')
        response = model.generate_content(prompt)

        new_title = response.text.strip()
        if new_title and new_title.lower() != title.lower():
            print(f"   Gemini –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {new_title}")
            return new_title
        return title
    except Exception as e:
        print(f"   Gemini ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        return title


def translate_titles(
    book_id: int,
    source_field: str,
    result_field: str,
    target_lang: str,
    gemini_refine: bool = True
):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    print(f"TRANSLATE[{book_id}] üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {source_field}...")
    response = supabase.table("books").select(
        f"{source_field}, title, author"
    ).eq("id", book_id).single().execute()
    book_data = response.data
    if not book_data or not book_data.get(source_field):
        print(f"TRANSLATE[{book_id}] ‚ùå –ù–µ—Ç {source_field} –¥–ª—è –∫–Ω–∏–≥–∏.")
        return

    source_json = json.loads(book_data[source_field])
    book_title = book_data.get("title", "")
    book_author = book_data.get("author", "")

    lang_name = LANG_NAME_RU_CASE.get(target_lang, target_lang)
    chapters = source_json.get("chapters", [])
    result = {"chapters": []}

    for idx, chapter in enumerate(chapters):
        chapter_number = idx + 1
        orig_title = chapter.get("title", "").strip()
        if not orig_title:
            print(
                f"TRANSLATE[{book_id}] ‚ö†Ô∏è –ù–µ—Ç title –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        print(
            f"TRANSLATE[{book_id}] üåé –ì–ª–∞–≤–∞ {chapter_number}: –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
        prompt = (
            f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏ '{book_title}' –∞–≤—Ç–æ—Ä–∞ {book_author} –Ω–∞ {lang_name} —è–∑—ã–∫. "
            f"–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –Ω–æ–º–µ—Ä {chapter_number}. –°–¥–µ–ª–∞–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è –Ω–æ—Å–∏—Ç–µ–ª—è —è–∑—ã–∫–∞, –∂–∏–≤—ã–º –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º. "
            f"–°–æ—Ö—Ä–∞–Ω–∏ —Å—É—Ç—å –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {orig_title}\n"
            f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        )

        translation = None
        for attempt in range(3):
            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": prompt},
                    ]
                )
                translation = completion.choices[0].message.content.strip()
                print(f"TRANSLATE[{book_id}] ‚úÖ –ü–µ—Ä–µ–≤–æ–¥: {translation}")
                break
            except Exception as e:
                print(
                    f"TRANSLATE[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(1)
        if not translation:
            print(
                f"TRANSLATE[{book_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ title –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # Gemini: refine if needed
        if gemini_refine:
            translation = refine_title_with_gemini_sdk(
                book_title, book_author, orig_title, translation, target_lang)

        # –î–æ–ø. —Ü–∏–∫–ª ‚Äî –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ, –ø—Ä–æ—Å–∏–º –∫–æ—Ä–æ—á–µ
        while len(translation) > 55:
            print(
                f"TRANSLATE[{book_id}] üîÑ –ü–µ—Ä–µ–≤–æ–¥ –¥–ª–∏–Ω–Ω–µ–µ 55 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—Å–∏–º –∫–æ—Ä–æ—á–µ...")
            shorten_prompt_direct = (
                f"–°–¥–µ–ª–∞–π —á—É—Ç—å —á—É—Ç—å –∫–æ—Ä–æ—á–µ —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–ª–∞–≤—ã {chapter_number} –∫–Ω–∏–≥–∏ '{book_title}' –∞–≤—Ç–æ—Ä–∞ {book_author} –Ω–∞ {lang_name} —è–∑—ã–∫. "
                f"–°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–º—ã—Å–ª –∏ –ª–µ–≥–∫–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è.\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: '{translation}'\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª: '{orig_title}'\n"
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
            )
            shorten_prompt_reprase = (
                f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–ª–∞–≤—ã {chapter_number} –∫–Ω–∏–≥–∏ '{book_title}' –∞–≤—Ç–æ—Ä–∞ {book_author} –Ω–∞ {lang_name} —è–∑—ã–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –Ω–µ –¥–æ—Å–ª–æ–≤–Ω—ã–º, –∞ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∏ –ø—Ä–∏ —ç—Ç–æ–º –æ–Ω –±—ã–ª —á—É—Ç—å —á—É—Ç—å –ø–æ–∫–æ—Ä–æ—á–µ. "
                f"–°–æ—Ö—Ä–∞–Ω–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–º—ã—Å–ª –∏ –ª–µ–≥–∫–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è.\n"
                f"–ü–µ—Ä–µ–≤–æ–¥: '{translation}'\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª: '{orig_title}'\n"
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
            )
            try:
                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": shorten_prompt_reprase},
                    ]
                )
                translation = completion.choices[0].message.content.strip()
                print(f"TRANSLATE[{book_id}] ‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥: {translation}")
                # Gemini-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                if gemini_refine:
                    translation = refine_title_with_gemini_sdk(
                        book_title, book_author, orig_title, translation, target_lang)
            except Exception as e:
                print(f"TRANSLATE[{book_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏: {e}")
                break

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ summary!)
        result["chapters"].append({
            "chapter_number": chapter_number,
            "title": translation
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ books_translations
    print(f"TRANSLATE[{book_id}] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {result_field}...")
    supabase.table("books_translations").update(
        {result_field: json.dumps(result, ensure_ascii=False, indent=2)}
    ).eq("book_id", book_id).eq("language", target_lang).execute()
    print(f"TRANSLATE[{book_id}] ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
