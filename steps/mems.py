import os
import io
import json
from pathlib import Path
from PIL import Image
from datetime import datetime, timezone
from openai import OpenAI
from utils.supabase_client import get_supabase_client
from schemas.mems import MemeIdea


def generate_memes_for_book(book_id: int, source_lang: str = "en"):
    supabase = get_supabase_client()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    response = supabase.table("books").select(
        "title, author, text_by_chapters"
    ).eq("id", book_id).single().execute()

    data = response.data
    title = data["title"]
    author = data["author"]
    chapters = json.loads(data["text_by_chapters"])["chapters"]

    total_chapters = len(chapters)
    output_dir = Path(f"export/mems/book_{book_id}")
    output_dir.mkdir(parents=True, exist_ok=True)

    lang_names_pr = {
        "en": "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        "es": "–∏—Å–ø–∞–Ω—Å–∫–æ–º",
        "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º",
        "de": "–Ω–µ–º–µ—Ü–∫–æ–º",
        "ru": "—Ä—É—Å—Å–∫–æ–º",
        "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º",
        "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º (–±—Ä–∞–∑–∏–ª—å—Å–∫–æ–º)",
        "tr": "—Ç—É—Ä–µ—Ü–∫–æ–º",
        "ja": "—è–ø–æ–Ω—Å–∫–æ–º"
    }
    readable_target_pr = lang_names_pr.get(source_lang, source_lang)

    for i, chapter in enumerate(chapters):
        chapter_number = chapter["chapter_number"]
        paragraphs = chapter["paragraphs"]
        print(f"\nüìò –ì–ª–∞–≤–∞ {chapter_number} ({i+1}/{total_chapters})")

        chapter_text = "\n".join(
            [f"[{idx+1}] {p}" for idx, p in enumerate(paragraphs)])

        system_prompt = (
            f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥—É –∏ –º–µ–º–∞–º.\n"
            f"–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –∏–∑ –∫–Ω–∏–≥–∏ '{title}' –∞–≤—Ç–æ—Ä–∞ {author}.\n"
            f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∞–±–∑–∞—Ü (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –≥–ª–∞–≤—ã) –∏ –ø—Ä–∏–¥—É–º–∞–π –ª–µ–≥–∫–∏–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ–º ‚Äî –∏—Ä–æ–Ω–∏—á–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Å–∞–º–æ–∏—Ä–æ–Ω–∏—á–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n"
            f"–°—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º—É—é –∏–¥–µ—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–º–æ–≤. \n"
            f"–ù–∞ –º–µ–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∏–ª–∏ –≥–µ—Ä–æ—è –∏–ª–∏ –æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–ª—é—Å —Å–ª–æ–≤–æ –∏–ª–∏ –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–æ 5 —Å–ª–æ–≤ –∏–∑ –∞–±–∑–∞—Ü–∞ –Ω–∞ {readable_target_pr} —è–∑—ã–∫–µ.\n"
            f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –¢–ó –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–µ–º–∞. –°—Ç–∏–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø–∏—Å—ã–≤–∞–π.\n"
            f"–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç—É."
        )

        try:
            completion = client.beta.chat.completions.parse(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": chapter_text[:12000]}
                ],
                response_format=MemeIdea
            )
            result = completion.choices[0].message.parsed

            para_idx = result.paragraph_index
            meme_prompt = result.meme_prompt
            hero_name = result.hero_name

            print(f"üéØ –ú–µ–º –ø–æ –∞–±–∑–∞—Ü—É {para_idx}: {meme_prompt}\n\n")
            print(f"üßë –ì–µ—Ä–æ–π –º–µ–º–∞: {hero_name}\n\n")

            generate_meme_image(
                book_id=book_id,
                chapter_id=chapter_number,
                paragraph_id=para_idx,
                prompt=meme_prompt,
                hero_name=hero_name,
                title=title,
                author=author
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–ª–∞–≤—ã {chapter_number}: {e}")

        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {round((i + 1) / total_chapters * 100)}%")


def generate_meme_image(book_id: int, chapter_id: int, paragraph_id: int, prompt: str, hero_name: str, title: str, author: str):
    import base64
    from openai import OpenAI
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    input_folder = Path(f"export/mems/book_{book_id}")
    image_files = list(input_folder.glob("*.webp"))

    image_files = []
    for img_path in input_folder.glob("*.webp"):
        try:
            img = Image.open(img_path)
            w, h = img.size
            if w >= h:
                new_w, new_h = 512, int(h * (512 / w))
            else:
                new_h, new_w = 512, int(w * (512 / h))
            img = img.resize((new_w, new_h))
            buf = io.BytesIO()
            img.save(buf, format="WEBP")
            buf.seek(0)
            image_files.append(("image.webp", buf))
            img.close()
        except Exception:
            continue

    prompt_full = (
        f"–ù–∞—Ä–∏—Å—É–π –º–µ–º –ø–æ –º–æ—Ç–∏–≤–∞–º –∫–Ω–∏–≥–∏ '{title}' –∞–≤—Ç–æ—Ä–∞ {author}.\n"
        f"–ú–µ–º –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ {hero_name}. –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ –¥–∞–Ω—ã.\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {prompt}"
    )

    print(f"üñº –†–∏—Å—É–µ–º: {prompt_full}")
    model = "gpt-image-1"
    size = "1024x1024"

    if image_files:
        print("      üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: –ø–µ—Ä–µ–¥–∞–Ω—ã")
        response = client.images.edit(
            model=model,
            image=image_files,
            prompt=prompt_full,
            n=1,
            size=size,
            user=f"book-meme:{int(datetime.now(timezone.utc).timestamp())}"
        )
        image_base64 = response.data[0].b64_json

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä—ã
        for _, buf in image_files:
            buf.close()
    else:
        print("      üé® –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        response = client.images.generate(
            model=model,
            prompt=prompt_full,
            n=1,
            size=size,
            user=f"book-meme:{int(datetime.now(timezone.utc).timestamp())}"
        )
        image_base64 = response.data[0].b64_json

    if not image_base64:
        raise ValueError("‚ùå OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    filepath = Path(
        f"export/mems/book_{book_id}/book_{book_id}_{chapter_id}_{paragraph_id}.webp")
    with open(filepath, "wb") as f:
        f.write(base64.b64decode(image_base64))
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
