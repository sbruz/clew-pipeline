import os
import time
import json
from typing import Optional
from openai import OpenAI, OpenAIError, APIConnectionError, RateLimitError, AuthenticationError
from utils.sentence_splitter import split_into_sentences
from schemas.translation_schema import (
    ChapterParagraphSentence,
    Sentence,
    ChapterItemWithSentences,
    ChapterStructureWithSentences,
    WordItem,
    ParagraphWordAnalysis,
    SentenceOriginal,
    ChapterParagraphSentenceOriginal,
    ChapterParagraphSentenceTranslated,
    ChapterItemWithTranslatedSentences,
    ChapterStructureTranslatedSentences,
)
from schemas.chapter_schema import ChapterStructure


def format_text_with_openai(text, lang="en", max_chars=4000) -> str:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    system_prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ—Ä—è–¥–æ–∫, –Ω–µ –º–µ–Ω—è—è –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:\n"
        "- –£–¥–∞–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤.\n"
        "- –£–¥–∞–ª–∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –∞–±–∑–∞—Ü–∞ –∏ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n"
        "- –ó–∞–º–µ–Ω–∏ –¥–≤–æ–π–Ω—ã–µ –∏ —Ç—Ä–æ–π–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥.\n"
        "- –ù–µ –∏–∑–º–µ–Ω—è–π —Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
        "- –†–∞–∑–¥–µ–ª—è–π –∞–±–∑–∞—Ü—ã –¥–≤—É–º—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫–∏.\n"
    )

    try:
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": system_prompt},
                # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                {"role": "user", "content": text[:max_chars]}
            ],
            temperature=0.2
        )
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI.")
        return response.choices[0].message.content

    except RateLimitError:
        print("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except AuthenticationError:
        print("‚õî –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å OPENAI_API_KEY.")
    except APIConnectionError:
        print("‚õî –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ API-–¥–æ—Å—Ç—É–ø.")
    except OpenAIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return ""


def run(text, lang, max_chars):
    print("üìò –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
    start = time.time()
    formatted = format_text_with_openai(text, lang, max_chars)
    end = time.time()

    if not formatted:
        print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return ""

    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {round(end - start, 2)} —Å–µ–∫—É–Ω–¥.\n")
    print("üìÑ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(formatted[:1000])
    return formatted


def split_paragraphs_with_openai(text, lang="en", max_chars=4000) -> str:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    system_prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã:\n"
        "- –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–ª–æ–≤.\n"
        "- –ê–±–∑–∞—Ü –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–ª–æ–≤.\n"
        "- –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ (30‚Äì35+ —Å–ª–æ–≤), —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Ä–∞–∑–±–∏–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –º–µ—Å—Ç–∞–º (–∑–∞–ø—è—Ç–∞—è, —Å–æ—é–∑: and, but, so, because –∏ –¥—Ä.), —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.\n"
        "- –ù–µ –º–µ–Ω—è–π –∏ –Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–µ–∫—Å—Ç.\n"
        "- –†–∞–∑–¥–µ–ª—è–π –∞–±–∑–∞—Ü—ã –¥–≤—É–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ (\\n\\n).\n"
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
    )

    try:
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–∞–∑–±–∏–≤–∫—É –≤ OpenAI...")
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text[:max_chars]}
            ],
            temperature=0.3
        )
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI.")
        return response.choices[0].message.content

    except RateLimitError:
        print("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI.")
    except AuthenticationError:
        print("‚õî –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á.")
    except APIConnectionError:
        print("‚õî –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
    except OpenAIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return ""


def split_into_paragraphs(book_id, lang, max_chars):
    from utils.supabase_client import get_supabase_client
    supabase = get_supabase_client()

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º formated_text –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        "formated_text").eq("id", book_id).single().execute()
    text = response.data.get("formated_text")
    if not text:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏.")
        return

    result = split_paragraphs_with_openai(text, lang, max_chars)

    if not result:
        print("‚ö†Ô∏è –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        return

    print("üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º separated_text...")
    supabase.table("books").update(
        {"separated_text": result}).eq("id", book_id).execute()
    print("‚úÖ –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


def group_into_chapters(book_id: int, lang: str, max_chars: int):
    from utils.supabase_client import get_supabase_client
    supabase = get_supabase_client()

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º separated_text –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        "separated_text").eq("id", book_id).single().execute()
    text: Optional[str] = response.data.get("separated_text")

    if not text:
        print("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –≥–ª–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    system_prompt = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –≤ –≥–ª–∞–≤—ã –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
        "–†–∞–∑–±–µ–π —Ç–µ–∫—Å—Ç –Ω–∞ –≥–ª–∞–≤—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n"
        "- –ì–ª–∞–≤–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ü–µ–Ω–∞ –∏–ª–∏ –≤–∞–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥—Ä—É–≥–∞—è.\n"
        "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤—ã: –æ—Ç 10 –¥–æ 50 –∞–±–∑–∞—Ü–µ–≤.\n"
        "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Å–º—ã—Å–ª–æ–≤–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –∞ –Ω–µ –¥–ª–∏–Ω–∞.\n"
        "- –ù–µ –∏–∑–º–µ–Ω—è–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–µ–≤.\n"
        "- –ù–∞—á–∏–Ω–∞–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –∞–∑–±–∞—Ü–µ–≤ —Å 1 –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã.\n"
        "- –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.\n"
    )

    try:
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ GPT –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –≥–ª–∞–≤—ã...")

        completion = client.beta.chat.completions.parse(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text[:max_chars]}
            ],
            response_format=ChapterStructure,
        )

        chapter_data = completion.choices[0].message.parsed

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase
        json_text = chapter_data.model_dump_json(indent=2)

        supabase.table("books").update(
            {"text_by_chapters": json_text}).eq("id", book_id).execute()
        print("‚úÖ –†–∞–∑–º–µ—Ç–∫–∞ –≥–ª–∞–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –Ω–∞ –≥–ª–∞–≤—ã: {e}")


def simplify_text_for_beginners(book_id: int, lang: str, max_chars: int):
    from utils.supabase_client import get_supabase_client
    from schemas.chapter_schema import ChapterStructure, ChapterItem
    import json

    supabase = get_supabase_client()

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º text_by_chapters –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        "text_by_chapters").eq("id", book_id).single().execute()
    original_text = response.data.get("text_by_chapters")

    if not original_text:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.")
        return

    original_structure = ChapterStructure.model_validate_json(original_text)
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    system_prompt = (
        "–¢—ã ‚Äî —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏.\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –£–ø—Ä–æ—â–∞–π –ª–µ–∫—Å–∏–∫—É –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –¥–µ–ª–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º, –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —Å —É—Ä–æ–≤–Ω–µ–º –∑–Ω–∞–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ A2-B1.\n"
        "- –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "- –ù–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∞–±–∑–∞—Ü–∞–º.\n"
        "- –ù–µ —É–¥–∞–ª—è–π –∏ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –∞–±–∑–∞—Ü—ã.\n"
        "- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –≥–ª–∞–≤—ã –ø–æ —Å—Ö–µ–º–µ ChapterItem. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )

    simplified_chapters = []

    for chapter in original_structure.chapters:
        print(
            f"\nüìò –ì–ª–∞–≤–∞ {chapter.chapter_number} ‚Äî {len(chapter.paragraphs)} –∞–±–∑–∞—Ü–µ–≤")

        chapter_attempts = 0
        success = False

        while chapter_attempts < 3 and not success:
            chapter_attempts += 1
            print(f"  üîÑ –ü–æ–ø—ã—Ç–∫–∞ {chapter_attempts}...")

            try:
                chapter_json = chapter.model_dump_json(indent=2)

                completion = client.beta.chat.completions.parse(
                    model="gpt-4.1",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": chapter_json[:max_chars]}
                    ],
                    response_format=ChapterItem,
                )

                simplified = completion.choices[0].message.parsed

                original_count = len(chapter.paragraphs)
                simplified_count = len(simplified.paragraphs)

                if simplified_count != original_count:
                    print(
                        f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {original_count} –∞–±–∑–∞—Ü–µ–≤, –ø–æ–ª—É—á–µ–Ω–æ {simplified_count}")
                else:
                    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ. –ê–±–∑–∞—Ü–µ–≤: {simplified_count}")
                    simplified_chapters.append(simplified)
                    success = True

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ GPT: {e}")

        if not success:
            print(
                f"‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≥–ª–∞–≤—ã {chapter.chapter_number}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            return

    # –°–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    final_structure = ChapterStructure(chapters=simplified_chapters)
    json_text = final_structure.model_dump_json(indent=2)

    supabase.table("books").update(
        {"text_by_chapters_simplified": json_text}).eq("id", book_id).execute()
    print("\n‚úÖ –í—Å–µ –≥–ª–∞–≤—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def translate_text_structure(
    book_id: int,
    source_field: str,
    intermediate_field: str,
    result_field: str,
    source_lang: str,
    target_lang: str,
    max_chars: int
):
    from utils.supabase_client import get_supabase_client
    supabase = get_supabase_client()

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {source_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        source_field).eq("id", book_id).single().execute()
    text = response.data.get(source_field)

    if not text:
        print(f"‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ {source_field}.")
        return

    original_structure = ChapterStructure.model_validate_json(text)
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    paragraphs_sentences_flat = []
    chapters_result = []

    total_paragraphs = sum(len(ch.paragraphs)
                           for ch in original_structure.chapters)
    translated_count = 0

    system_prompt_translate = (
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å {source_lang} –Ω–∞ {target_lang}. "
        "–°—Ç—Ä—É–∫—Ç—É—Ä—É JSON –Ω–µ –º–µ–Ω—è–π: –¥–æ–±–∞–≤—å –ø–æ–ª–µ 'sentence_translation' —Ä—è–¥–æ–º —Å 'sentence_original'. "
        "–ù–µ —É–¥–∞–ª—è–π, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º."
    )

    for chapter in original_structure.chapters:
        print(f"\nüìö –ì–ª–∞–≤–∞ {chapter.chapter_number}")
        translated_paragraphs = []

        for paragraph in chapter.paragraphs:
            print(f"  ‚úÇÔ∏è –ê–±–∑–∞—Ü {paragraph.paragraph_number}")

            raw_sentences = split_into_sentences(
                paragraph.paragraph_content, source_lang)
            para_struct_original = ChapterParagraphSentenceOriginal(
                paragraph_number=paragraph.paragraph_number,
                sentences=[
                    SentenceOriginal(
                        sentence_number=i + 1,
                        sentence_original=s.strip()
                    )
                    for i, s in enumerate(raw_sentences)
                ]
            )
            paragraphs_sentences_flat.append(para_struct_original)

            # –ü–µ—Ä–µ–≤–æ–¥
            attempt = 0
            success = False

            while attempt < 3 and not success:
                attempt += 1
                try:
                    print(f"    üåç –ü–µ—Ä–µ–≤–æ–¥ (–ø–æ–ø—ã—Ç–∫–∞ {attempt})...")
                    completion = client.beta.chat.completions.parse(
                        model="gpt-4.1",
                        messages=[
                            {"role": "system", "content": system_prompt_translate},
                            {"role": "user", "content": para_struct_original.model_dump_json(indent=2)[
                                :max_chars]}
                        ],
                        response_format=ChapterParagraphSentenceTranslated
                    )
                    translated_para = completion.choices[0].message.parsed

                    if len(translated_para.sentences) != len(para_struct_original.sentences):
                        print(
                            f"    ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {len(para_struct_original.sentences)} ‚Üí {len(translated_para.sentences)}")
                    else:
                        translated_paragraphs.append(translated_para)
                        translated_count += 1
                        percent = round(
                            (translated_count / total_paragraphs) * 100)
                        print(
                            f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ. üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {translated_count}/{total_paragraphs} ({percent}%)")
                        success = True

                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
                    time.sleep(2)

            if not success:
                print(
                    f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞–±–∑–∞—Ü {paragraph.paragraph_number}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                return

        chapters_result.append(ChapterItemWithTranslatedSentences(
            chapter_number=chapter.chapter_number,
            paragraphs=translated_paragraphs
        ))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (SentenceOriginal)
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {intermediate_field}...")
    json_sentences = json.dumps(
        [p.model_dump() for p in paragraphs_sentences_flat],
        ensure_ascii=False,
        indent=2
    )
    supabase.table("books").update(
        {intermediate_field: json_sentences}).eq("id", book_id).execute()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (SentenceTranslated)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    full_structure = ChapterStructureTranslatedSentences(
        chapters=chapters_result)
    json_translated = full_structure.model_dump_json(indent=2)
    supabase.table("books").update(
        {result_field: json_translated}).eq("id", book_id).execute()

    print("\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∞–±–∑–∞—Ü–µ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.")


def enrich_sentences_with_words(
    book_id: int,
    source_field: str,
    result_field: str,
    source_lang: str,
    target_lang: str,
    max_chars: int
):
    from utils.supabase_client import get_supabase_client
    supabase = get_supabase_client()

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {source_field} –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}...")
    response = supabase.table("books").select(
        source_field).eq("id", book_id).single().execute()
    text = response.data.get(source_field)

    if not text:
        print(f"‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ {source_field}.")
        return

    structure = ChapterStructureWithSentences.model_validate_json(text)
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    total_sentences = sum(len(p.sentences)
                          for c in structure.chapters for p in c.paragraphs)
    enriched_count = 0

    system_prompt = (
        f"–¢—ã ‚Äî —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        f"–û—á–∏—Å—Ç–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Ä–∞–∑–±–µ–π –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ –¥–ª–∏–Ω–µ —Å–º—ã—Å–ª–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–º–µ—Å—Ç–µ —Ñ—Ä–∞–∑–æ–≤—ã–µ –≥–ª–∞–≥–æ–ª—ã, –∏–¥–∏–æ–º—ã.\n"
        f"–î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —É–∫–∞–∂–∏:\n"
        f"- o: –æ—Ä–∏–≥–∏–Ω–∞–ª\n"
        f"- o_t: –ø–µ—Ä–µ–≤–æ–¥\n"
        f"- l: –ª–µ–º–º–∞ (–µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å o, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º)\n"
        f"- l_t: –ø–µ—Ä–µ–≤–æ–¥ –ª–µ–º–º—ã (–µ—Å–ª–∏ l –ø—É—Å—Ç–æ–µ, –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º)\n\n"
        f"–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (response_format)."
    )

    for chapter in structure.chapters:
        print(f"\nüìö –ì–ª–∞–≤–∞ {chapter.chapter_number}")

        for paragraph in chapter.paragraphs:
            print(
                f"  ‚úÇÔ∏è –ê–±–∑–∞—Ü {paragraph.paragraph_number} ‚Äî {len(paragraph.sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

            attempt = 0
            success = False

            while attempt < 3 and not success:
                attempt += 1
                try:
                    input_data = [
                        {
                            "sentence_number": s.sentence_number,
                            "sentence_original": s.sentence_original,
                            "sentence_translation": s.sentence_translation
                        }
                        for s in paragraph.sentences
                    ]

                    completion = client.beta.chat.completions.parse(
                        model="gpt-4.1",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": json.dumps(
                                input_data, ensure_ascii=False, indent=2)[:max_chars]}
                        ],
                        response_format=ParagraphWordAnalysis,
                    )

                    parsed_paragraph = completion.choices[0].message.parsed
                    parsed_sentences = parsed_paragraph.sentences

                    if len(parsed_sentences) != len(paragraph.sentences):
                        print(
                            f"    ‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: –æ–∂–∏–¥–∞–ª–æ—Å—å {len(paragraph.sentences)}, –ø–æ–ª—É—á–µ–Ω–æ {len(parsed_sentences)}")
                    else:
                        for sentence in paragraph.sentences:
                            match = next(
                                (s for s in parsed_sentences if s.sentence_number == sentence.sentence_number), None)
                            if not match:
                                raise ValueError(
                                    f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.sentence_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            sentence.words = match.words

                        enriched_count += len(paragraph.sentences)
                        percent = round(
                            (enriched_count / total_sentences) * 100)
                        print(
                            f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ ‚Äî {len(paragraph.sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {enriched_count}/{total_sentences} ({percent}%)")
                        success = True

                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ª–æ–≤: {e}")

            if not success:
                print(
                    f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–±–∑–∞—Ü {paragraph.paragraph_number}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                return

    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {result_field}...")
    json_result = structure.model_dump_json(indent=2)
    supabase.table("books").update(
        {result_field: json_result}).eq("id", book_id).execute()

    print("‚úÖ –†–∞–∑–±–æ—Ä —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
